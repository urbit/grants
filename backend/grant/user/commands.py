import click
from flask.cli import with_appcontext

from .models import User, db


# @click.command()
# @click.argument('identity')
# @with_appcontext
# def delete_user(identity):
#     print(identity)
#     if str.isdigit(identity):
#         user = User.get_by_id(identity)
#     else:
#         user = User.get_by_email(identity)
#
#     if user:
#         db.session.delete(user)
#         db.session.commit()
#         click.echo(f'Succesfully deleted {user.display_name} (uid {user.id})')
#     else:
#         raise click.BadParameter('Invalid user identity. Must be an id or email, ' \
#                                  'account address, or email address of an ' \
#                                  'existing user.')

@click.command()
@click.argument('email', type=str)
@click.argument('password', type=str)
@with_appcontext
def create_user(email, password):
    print(f'Creating user with email {email} ...')
    user = User.create(
        email_address=email,
        password=password,
        display_name="Change me",
        title="Change me"
    )
    db.session.add(user)
    db.session.flush()
    user.email_verification.has_verified = True
    db.session.flush()
    user.set_admin(True)
    print(f'User {email} created with id {user.id}')
    db.session.commit()


@click.command()
@click.argument('identity')
@with_appcontext
def set_admin(identity):
    print("Setting admin to user with identity: " + identity)
    if str.isdigit(identity):
        user = User.get_by_id(identity)
    else:
        user = User.get_by_email(identity)

    if user:
        user.set_admin(True)
        db.session.add(user)
        db.session.commit()
        click.echo(f'Successfully set {user.display_name} (uid {user.id}) to admin')
    else:
        raise click.BadParameter('''Invalid user identity. Must be an id or email, 
                                 'account address, or email address of an  
                                 'existing user.''')


@click.command()
@click.argument('count', type=int)
@with_appcontext
def create_proposals(count):
    user = User.query.filter_by().first()
    for i in range(count):
        if i < 5:
            stage = ProposalStageEnum.WIP
        else:
            stage = ProposalStageEnum.COMPLETED
        target = str(randint(1, 10))
        p = Proposal.create(
            stage=stage,
            status=ProposalStatus.LIVE,
            title=f'Fake Proposal #{i}',
            content=f'My fake proposal content, numero {i}',
            brief=f'This is proposal {i} generated by "flask create-proposals", a useful tool for generating test proposal data.',
            category=Category.random(),
            target=target,
        )
        p.date_published = datetime.datetime.now()
        p.team.append(user)
        db.session.add(p)
        db.session.flush()

        num_ms = randint(1, 9)
        for j in range(num_ms):
            m = Milestone(
                title=f'Fake MS {j}',
                content=f'Fake milestone #{j} on fake proposal #{i}!',
                date_estimated=datetime.datetime.now(),
                payout_amount=str(float(target) / num_ms),
                immediate_payout=j == 0,
                proposal_id=p.id,
                index=j
            )
            db.session.add(m)
        for j in range(100):
            c = Comment(
                proposal_id=p.id,
                user_id=user.id,
                parent_comment_id=None,
                content=f'Fake comment #{j} on fake proposal #{i}!'
            )
            db.session.add(c)

    db.session.commit()
    print(f'Added {count} LIVE fake proposals')
